{"version":3,"sources":["components/Header/Header.js","components/TodoListItem/TodoListItem.js","redux/actions/actions.js","components/TodoList/TodoList.js","components/TodoForm/TodoForm.js","components/App/App.js","redux/reducers/todoReducer.js","redux/reducers/reducers.js","redux/store/store.js","index.js"],"names":["Header","className","TodoListItem","title","todoId","useState","isDone","setIsDone","dispatch","useDispatch","tooggleCheckbox","useCallback","listItemStyle","onChange","type","onClick","payload","deleteTodo","clickTrashButton","width","height","viewBox","fill","xmlns","d","fillRule","React","memo","TodoList","todosArr","useSelector","state","todoReducer","map","todo","id","TodoForm","setTitle","uuid","typeTitleText","event","target","value","placeholder","disabled","addTodo","clickAddkButton","App","initialState","action","filter","reducers","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"+TAIe,SAASA,IACtB,OACE,qBAAKC,UAAU,SAAf,SACE,4C,wBCCN,SAASC,EAAT,GAA0C,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAAU,EACXC,oBAAS,GADE,mBAChCC,EADgC,KACxBC,EADwB,KAGjCC,EAAWC,cAGXC,EAAkBC,uBAAY,WAClCJ,GAAWD,KACV,CAACA,IAEAM,EAAgB,4BAMpB,OAJIN,IACFM,EAAgB,0BAIhB,oBAAIX,UAAU,aAAd,SACE,qBAAIA,UAAS,0BAAqBW,EAArB,aAAb,UACE,gCACE,uBACEX,UAAU,mBACVY,SAAUH,EACVI,KAAK,aAEP,qBAAKb,UAAU,YAAf,SAA4BE,OAE7BG,GACC,wBACES,QAAS,kBAzBM,SAACX,GAAD,OAAYI,ECPb,SAACJ,GAAD,MAAa,CACrCU,KAAM,cACNE,QAASZ,GDKqCa,CAAWb,IAyBhCc,CAAiBd,IAChCH,UAAU,sBACVa,KAAK,SAHP,SAKE,sBACEK,MAAM,QACNC,OAAO,QACPC,QAAQ,YACRpB,UAAU,cACVqB,KAAK,eACLC,MAAM,6BANR,UAQE,sBAAMC,EAAE,oKACR,sBACEC,SAAS,UACTD,EAAE,yPAeHE,UAAMC,KAAKzB,G,ME5D1B,SAAS0B,IACP,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,eAE9C,OACE,8BACGH,EAASI,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,CAA4B/B,MAAO+B,EAAK/B,MAAOC,OAAQ8B,EAAKC,IAAzCD,EAAKC,SAejBT,UAAMC,KAAKC,G,uBCpB1B,SAASQ,IAAY,IAAD,EACQ/B,mBAAS,IADjB,mBACXF,EADW,KACJkC,EADI,KAEZjC,EAASkC,MACT9B,EAAWC,cAGX8B,EAAgB5B,uBACpB,SAAC6B,GACCH,EAASG,EAAMC,OAAOC,SAExB,CAACL,IAGH,OACE,sBAAKpC,UAAU,iBAAf,UACE,uBACEY,SAAU0B,EACVzB,KAAK,OACLb,UAAU,eACV0C,YAAY,WACZD,MAAOvC,IAET,qBAAKF,UAAU,qBAAf,SACE,wBACE2C,UAAWzC,EACXY,QAAS,kBArBO,SAACZ,EAAOC,GAAR,OAAmBI,EFZtB,SAACL,EAAOC,GAAR,MAAoB,CACzCU,KAAM,WACNE,QAAS,CAAEb,QAAOC,WEUkCyC,CAAQ1C,EAAOC,IAqB5C0C,CAAgB3C,EAAOC,EAAQiC,EAAS,MACvDpC,UAAU,eACVa,KAAK,SAJP,2BAaOY,UAAMC,KAAKS,G,MCrCX,SAASW,IACtB,OACE,sBAAK9C,UAAU,sBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,O,2BCZA+C,EAAe,GAcNhB,EAZK,WAAmC,IAAlCD,EAAiC,uDAAzBiB,EAAcC,EAAW,uCAC5CnC,EAAkBmC,EAAlBnC,KAAME,EAAYiC,EAAZjC,QACd,OAAQF,GACN,IAAK,WACH,MAAa,sBAAOiB,GAAP,CAAc,CAAEI,GAAInB,EAAQZ,OAAQD,MAAOa,EAAQb,SAClE,IAAK,cACH,OAAa,YAAO4B,EAAMmB,QAAO,SAAChB,GAAD,OAAUA,EAAKC,KAAOnB,MACzD,QACE,OAAOe,ICHEoB,EAJEC,0BAAgB,CAC/BpB,gBCEaqB,EAFDC,sBAAYH,EAAUI,iCCGpCC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.2407498c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className='header'>\r\n      <h1>ToDo App</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { deleteTodo } from '../../redux/actions/actions';\r\n\r\nimport './TodoListItem.css';\r\n\r\nfunction TodoListItem({ title, todoId }) {\r\n  const [isDone, setIsDone] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const clickTrashButton = (todoId) => dispatch(deleteTodo(todoId));\r\n\r\n  const tooggleCheckbox = useCallback(() => {\r\n    setIsDone(!isDone);\r\n  }, [isDone]);\r\n\r\n  let listItemStyle = 'list-group-item-secondary';\r\n\r\n  if (isDone) {\r\n    listItemStyle = 'list-group-item-danger';\r\n  }\r\n\r\n  return (\r\n    <ul className='list-group'>\r\n      <li className={`list-group-item ${listItemStyle} item-box`}>\r\n        <div>\r\n          <input\r\n            className='form-check-input'\r\n            onChange={tooggleCheckbox}\r\n            type='checkbox'\r\n          ></input>\r\n          <div className='titleText'>{title}</div>\r\n        </div>\r\n        {isDone && (\r\n          <button\r\n            onClick={() => clickTrashButton(todoId)}\r\n            className='btn btn-info btn-sm'\r\n            type='button'\r\n          >\r\n            <svg\r\n              width='1.2em'\r\n              height='1.2em'\r\n              viewBox='0 0 16 16'\r\n              className='bi bi-trash'\r\n              fill='currentColor'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n            >\r\n              <path d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\r\n              <path\r\n                fillRule='evenodd'\r\n                d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z'\r\n              />\r\n            </svg>\r\n          </button>\r\n        )}\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoListItem.propTypes = {\r\n  todoId: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default React.memo(TodoListItem);\r\n","export const addTodo = (title, todoId) => ({\r\n  type: 'ADD_TODO',\r\n  payload: { title, todoId },\r\n});\r\n\r\nexport const deleteTodo = (todoId) => ({\r\n  type: 'DELETE_TODO',\r\n  payload: todoId,\r\n});\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport TodoListItem from '../TodoListItem/TodoListItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './TodoList.css';\r\n\r\nfunction TodoList() {\r\n  const todosArr = useSelector((state) => state.todoReducer);\r\n\r\n  return (\r\n    <div>\r\n      {todosArr.map((todo) => (\r\n        <TodoListItem key={todo.id} title={todo.title} todoId={todo.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todosArr: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ),\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n","import React, { useCallback, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport uuid from 'uuid/v4';\r\n\r\nimport './TodoForm.css';\r\n\r\nimport { addTodo } from '../../redux/actions/actions';\r\n\r\nfunction TodoForm() {\r\n  const [title, setTitle] = useState('');\r\n  const todoId = uuid();\r\n  const dispatch = useDispatch();\r\n  const clickAddkButton = (title, todoId) => dispatch(addTodo(title, todoId));\r\n\r\n  const typeTitleText = useCallback(\r\n    (event) => {\r\n      setTitle(event.target.value);\r\n    },\r\n    [setTitle]\r\n  );\r\n\r\n  return (\r\n    <div className='input-group mb'>\r\n      <input\r\n        onChange={typeTitleText}\r\n        type='text'\r\n        className='form-control'\r\n        placeholder='New ToDo'\r\n        value={title}\r\n      />\r\n      <div className='input-group-append'>\r\n        <button\r\n          disabled={!title}\r\n          onClick={() => clickAddkButton(title, todoId, setTitle(''))}\r\n          className='btn btn-info'\r\n          type='button'\r\n        >\r\n          Add ToDo\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoForm);\r\n","import React from 'react';\nimport Header from '../Header/Header';\nimport TodoList from '../TodoList/TodoList';\nimport TodoForm from '../TodoForm/TodoForm';\n\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className='container jumbotron'>\n      <Header />\n      <TodoForm />\n      <TodoList />\n    </div>\n  );\n}\n","const initialState = [];\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case 'ADD_TODO':\r\n      return (state = [...state, { id: payload.todoId, title: payload.title }]);\r\n    case 'DELETE_TODO':\r\n      return (state = [...state.filter((todo) => todo.id !== payload)]);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","import { combineReducers } from 'redux';\r\nimport todoReducer from './todoReducer';\r\n\r\nconst reducers = combineReducers({\r\n  todoReducer,\r\n});\r\n\r\nexport default reducers;\r\n","import { createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reducers from '../reducers/reducers'\r\n\r\nconst store = createStore(reducers, composeWithDevTools())\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}